#!/bin/bash
### DemonBot ###########################
# Version 20120619-1 by Scott Garrett #
# Wintervenom [(at)] archlinux.us     #
#######################################
# Dependencies:
# - bash >= 4.0
# - socat
# - coreutils: fold, awk

version=20120619-1
script_name='main'
debug_mode=1

# Parse -s (being sourced) and -c (console mode) arguments.
while getopts sc opt; do
    declare -g "opt_$opt"=1
done
shift $((OPTIND - 1))

# Disable file globbing.
set -f
# Unset all shell options and enable just what we need.
shopt -u $(shopt | cut -f1)
shopt -s extquote force_fignore sourcepath
# Initialize associative arrarys.
declare -g -A users connectors handlers commands loaded_scripts ircd_features


# Return whether first argument is a command/executable.
#
# Parameters:
#   [-e] name [arguments]
# Flags:
#   -e  Run name (with arguments) if it is a command/executable.
is_exec () {
    if [[ $1 != '-e' ]]; then
        type -t "$1" >/dev/null
    else
        shift
        type -t "$1" >/dev/null && "$@"
    fi
}

# Return the command type of a name (alias to `type -t`).
#
# Parameters:
#   name
# Outputs:
#   "...a single word which is one of 'alias', 'keyword', 'function',
#   'builtin', 'file'," or nothing, if name is not a command/executable.
cmd_type () {
    type -t "$1"
}

# Display DemonBot usage text.
usage () {
    cat <<EOF
DemonBot $version by Scott Garrett
Wintervenom [(at)] archlinux.us

Usage:
    ${0##/*} [-c] profile_name
EOF
    exit 2
}

# Log a message to the console.
# '-o' is assumed if a flag isn't specified.
# Note: Callback can change flag behavior.
#
# Parameters:
#   flag message
# Flags:
#   -o  Log to console (default)
#   -c  Only log to console
#   -d  Log to console if $debug_mode is set; implies '-c'
#   -f  Clean up and exit to shell after logging message
# Uses Globals:
#   log_prefix  Text to prefix the message
#   log_suffix  Text to suffix the message
# Callbacks:
#   log_callback message # With log_prefix and log_suffix applied
log () {
    local is_fatal stamp="[$(date +%T)] ${FUNCNAME[1]}"
    case "$1" in
        -d)
            [[ -z $debug_mode ]] && return 1
            stamp+=' DEBUG'
            ;&
        -c)
            local log_only=1
            ;&
        -o)
            shift
            ;;
        -f)
            is_fatal=1 stamp+=' FATAL'
            shift
            ;;
    esac
    set -- "${log_prefix}${1}${log_suffix}"
    # Send to stderr so logging messages don't screw up functions feeding the
    # stdout to someone else's stdin.
    echo "$stamp: $1" >&2
    is_exec -e log_callback "$1"
    [[ $is_fatal ]] && cleanup
}

# Silence `wait` errors.
wait () {
    builtin wait "$@" 2>/dev/null
}

# Silence `kill` errors.
kill () {
    [[ $1 ]] && builtin kill "$@" 2>/dev/null
}

# Sends a signal to specified processes (or all jobs, if no PIDs given) and
# gives them a chance to respond gracefully before killing remaining PIDs.
#
# Parameters:
#   [signal [pid ...]]
# Return Codes:
#   0   All processes terminated.
#   1   Unkillable processes remain.
safe_kill () {
    local s=$1
    shift
    [[ -z $1 ]] && set -- $(jobs -p)
    if kill -0 $@; then
        log -c 'Sending signal ${s^^} to background PID(s): $*'
        kill -s ${s:-TERM} $@
        # Just in case someone was doing some strange stuff.
        kill -s CONT $@
        sleep 2
        if kill -0 $@; then
            sleep 3
            log -c 'Killing remaining background processes.'
            kill -9 $@
            sleep 1
            if kill -0 $@; then
                log -c 'Unkillable background processes remain!'
                return 1
            fi
        fi
    fi
    return 0
}

# Clean up before exit.
cleanup () {
    echo >&2
    if [[ $connection_pid ]]; then
        log -c 'Disconnecting from the server. Goodbye, cruel world!'
        kill -w $connection_pid 2> /dev/null
    fi
    log -c 'Cleaning up...'
    exec 8<&-
    exec 9<&-
    [[ -f $demonbot_pid ]] && rm -f "$demonbot_pid"
    safe_kill
    exit
}

# List files found in core script directory, skipping temp/backup files.
#
# Parameters:
#   root_directory
# Output:
#   Paths to files in core directory, one per line.
core_scripts () {
    [[ ! -d "$1/core" ]] && return 1
    find "$1/core" -maxdepth 1 -type f \
        -not -iregex '.*.\(swp\|tmp\|bak\|old\)\|~.*' | sort
}



############
### Main ###
############
IFS=$' \t\n\r'
oifs=$IFS
config_dir="$HOME/.config/demonbot"
config_dirs=('/etc/xdg/demonbot' "$0.conf" "$config_dir")
server=${server:-$1}
server_dir="$config_dir/servers/$server"
users_dir="$server_dir/users"
users_file="$server_dir/passwd"
tmp_dir="$server_dir/tmp"
demonbot_in="$server_dir/in"
demonbot_out="$server_dir/out"
demonbot_pid="$server_dir/lock"

trap cleanup INT TERM HUP
# Load/reload the rest of the core.
if is_exec _unload_core; then
    log -c 'Unloading core...'
    $"_unload_core"
fi
log -c 'Looking for core scripts...'
unset core_loaded
for dir in "$config_dir" "${config_dirs[@]}"; do
    if [[ -d "$dir/core" ]]; then
        while read -r file; do
            log -c "Sourcing: ${file##*/}"
            . "$file"
        done < <(core_scripts "$dir")
        core_loaded=1
    fi
done
[[ -z $core_loaded ]] &&
    log -f 'FATAL: Core scripts not found in configuration directories.'
log -c 'Core scripts loaded.'

[[ $opt_s ]] && return 0

[[ -z $1 ]] && usage

if [[ -f $demonbot_pid ]]; then
    old_pid=$(<"$demonbot_pid")
    kill -0 "$old_pid" 2> /dev/null
    [[ $? == 0 ]] &&
        log -f "DemonBot PID $old_pid is already running this profile."
    log -c 'Hmm. A lock file was found, but no DemonBot is running.'
fi

set +f
mkdir -p "$config_dir"/{running,servers,global}
set -f

log -c 'Reading configuration.'
source_all "servers/$server/config" ||
    source_all global/config

[[ -z $hosts ]] &&
    log -f "No hosts are defined for '$server'."

mkdir -p "$tmp_dir" "$users_dir"
touch "$demonbot_pid"

rm -f "$demonbot_in" "$demonbot_out" 2> /dev/null
mkfifo "$demonbot_in" "$demonbot_out"

log -c 'Loading scripts.'
load_script

nick=${nicks:-$USER}
user=${user:-demonbot}
name=${name:-$USER}
mode=${mode:-0}
reconnect_secs=${reconnect_secs:-10}
reconnect_auto=${reconnect_auto:-1}
reconnect_loop=${reconnect_loop:-0}
altnick_loop=${altnick_lock:-0}
cmd_char=${cmd_char:-'$'}
debug_mode=${debug_mode:-1}
master_key=$(sha1sum <<< "$RANDOM$(date +%s%N)" | cut -d' ' -f1)
next_host=${next_host:-pop_host}
next_nick=${next_nick:-pop_nick}

[[ $reconnect_loop -gt 0 ]] && next_host='rotate_host'
[[ $nick_loop -gt 0 ]] && next_host='rotate_nick'
echo "$master_key" > "$server_dir/master-key"

log -c "Hosts: $(combine "${hosts[@]}")"
log -c "Nicks: $(combine ${nicks[@]})"
log -c "  Loop alts: $altnick_loop"
log -c "User: $user"
log -c "Name: $name"
log -c "Mode: $mode"
log -c "Auto reconnect: $reconnect_auto"
log -c "  Delay: $reconnect_secs"
log -c "  Loop: $reconnect_loop"
log -c "Command character: $cmd_char"
log -c "Debug mode: $debug_mode"
log -c "Temp directory: $tmp_dir"
log -c "Master key: $master_key"

if [[ -z $opt_c ]]; then
    connect
else
    while :; do
        read -e -p 'DemonBot> ' command
        echo
        eval "$command"
    done
fi
set +f
cleanup
