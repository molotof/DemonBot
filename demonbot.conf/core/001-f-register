#!/bin/bash

register () {
    local e opt OPTIND
    while getopts up opt; do
        declare "opt_$opt"=1
    done
    shift $((OPTIND - 1))
    local t=$1 n=${2,,} h=$3
    local log_prefix="$t: $n=$h: "
    shift 3
    if [[ -z $opt_u ]]; then
        if invalid_cname "$n"; then
            log -c 'invalid characters in name'
            return 1
        elif invalid_cname "$h"; then
            log -c 'invalid characters in handler'
            return 1
        elif ! is_exec "$h"; then
            log -c 'handler is not executable'
            return 1
        fi
        # Callbacks
        for c in '' "_$t" "_$t-$n" "_$t-$n-$h"; do
            is_exec -e "_register$c"
        done
        case "$t" in
            h|handler)
                handlers["$n"]+="$h "
                ;;
            x|command)
                default_groups=${default_groups:-global}
                commands["$n"]=$g
                commands["$n:groups"]=${*:-$default_groups}
                ;;
            y|connector)
                connectors["$n"]=$h
                ;;
            *)
                log_prefix="$t: "
                log -c 'invalid type'
                return 1
                ;;
        esac
        if [[ -z $opt_p ]]; then
            local f="$t:$n/$h"
            in_list "$f" ${loaded_scripts["$script_name:funcs"]} ||
                loaded_scripts["$script_name:funcs"]+="$f "
        fi
        log_prefix="added ${log_prefix/: /}"
        log -c
    else
        # Callbacks
        for c in '' "_$t" "_$t-$n" "_$t-$n-$h"; do
            is_exec -e "_unregister$c"
        done
        case "$t" in
            h|handler)
                local f=${handlers["$n"]}
                handlers["$n"]=$(del_list "$h" $f)
                [[ -z ${handlers["$n"]} ]] && unset handlers["$n"]
                ;;
            x|command)
                h=${commands["$n"]}
                unset commands["$n"] commands["$n:groups"]
                ;;
            y|connector)
                h=${connectors["$n"]}
                unset connectors["$n"]
                ;;
            *)
                log_prefix="$t: "
                log -c 'invalid type'
                return 1
        esac
        local f="$t:$n/$h" s=${loaded_scripts["$script_name:funcs"]}
        if in_list "$f" $s; then
            [[ $(cmd_type "$h") == 'function' ]] && unset "$h"
            loaded_scripts["$script_name:funcs"]=$(del_list "$f" $s)
            [[ -z ${loaded_scripts["$script_name:funcs"]} ]] &&
                unset loaded_scripts["$script_name:funcs"]
        fi
        log_prefix="removed ${log_prefix/: /}"
        log -c
    fi
    return 0
}

