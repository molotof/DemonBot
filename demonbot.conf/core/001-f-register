#!/bin/bash

# Assign an IRC event handler.
#
# Parameters:
#   event handler
# Return Codes:
#   1   Handler isn't executable
add_handler () {
    if [[ $1 == '-p' ]]; then
        local opt_p=1
        shift
    fi
    local event=${1,,}
    if [[ ${handlers["$event"]} ]]; then
        if in_list "$2" ${handlers["$event"]}; then
            log -c "${event^^} handler '$2' already assigned."
            return 1
        fi
    fi
    if is_exec "${2%% *}"; then
        handlers["$event"]+="$2 "
        [[ -z $opt_p && $script_name ]] &&
            add_sfunc "$script_name" "h:$event/$2"
        log -c "Assigned ${event^^} handler '$2'."
    else
        log -c "${event^^} handler '$2' isn't executable."
        return 1
    fi
    return 0
}

# Unregister an IRC event handler.
#
# Parameters:
#   event handler
# Return Codes:
#   1   Handler isn't assigned
del_handler () {
    local event=${1,,} funcs ftype
    if [[ -z ${handlers["$event"]} ]]; then
        log -c "${event^^} handler '$2' isn't assigned."
        return 1
    fi
    funcs=${handlers["$event"]}
    [[ $script_name ]] && del_sfunc "$script_name" "h:$event/$handler"
    [[ $(cmd_type "$2") == 'function' ]] && unset "$2"
    handlers["$event"]=$(del_list "$2" $funcs)
    local e=$?
    if [[ $e == 0 ]]; then
        log -c "${event^^} handler '$2' unset."
    else
        log -c "${event^^} handler '$2' isn't assigned."
    fi
    return $e
}

# Unregister all handlers.
del_all_handlers () {
    local event handler e=0
    for event in "${!handlers[@]}"; do
        for handler in ${handlers["$event"]}; do
            del_handler "$event" "$handler" || e=1
        done
    done
    return $e
}

# Register a connector.
#
# Parameters:
#   name handler
# Return Codes:
#   1   Connector isn't executable.
add_connector () {
    if [[ $1 == '-p' ]]; then
        local nounload=1
        shift
    fi
    local name=${1,,}
    if is_exec "${2%% *}"; then
        connectors["$name"]=$2
        [[ -z $nounload && $script_name ]] &&
            add_sfunc "$script_name" "c:$name"
        log -c "'$2' assigned '$name'."
    else
        log -c "'$2' is not executable."
        return 1
    fi
    return 0
}

# Unregister a connector.
#
# Parameters:
#   name
# Return Codes:
#   1   Connector isn't assigned
del_connector () {
    local name=${1,,}
    [[ $script_name ]] && del_sfunc "$script_name" "c:$name"
    unset "${connectors["$name"]}"
    unset connectors["$name"]
    log -c "'$name' unset."
    return 0
}

# Unregisters all connectors.
del_all_connectors () {
    local name e=0
    for name in "${!connectors[@]}"; do
        del_connector "$name" || e=1
    done
    return $e
}

# Assign a command.
#
# Parameters:
#   name handler [groups]
# Return Codes:
#   1   Command isn't executable
add_command () {
    if [[ $1 == '-p' ]]; then
        local nounload=1
        shift
    fi
    local IFS=' ' name=${1,,} c=$2
    shift 2
    default_groups=${default_groups:-global}
    if is_exec "${c%% *}"; then
        commands["$name"]=$c
        commands["$name:groups"]=${*:-$default_groups}
        [[ -z $nounload && $script_name ]] &&
            add_sfunc "$script_name" "x:$name"
        log -c "'$c' assigned '$name' for groups: ${*:-$default_groups}"
    else
        log -c "'$c' is not executable."
        return 1
    fi
    return 0
}

# Unassign a command.
#
# Parameters:
#   name
# Return Codes:
#   1   Command isn't assigned
del_command () {
    local name=${1,,}
    [[ $script_name ]] &&
        del_sfunc "$script_name" "x:$name"
    unset "${commands["$name"]}"
    unset commands["$name"] commands["$name:groups"]
    log -c "'$name' unset."
    return 0
}

# Unregisters all commands.
del_all_commands () {
    local name e=0
    for name in "${!commands[@]}"; do
        if [[ ! $name =~ ':' ]]; then
            del_command "$name" || e=1
        fi
    done
    return $e
}

