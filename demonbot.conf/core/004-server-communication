#!/bin/bash
declare -A numeric=(
    ['001']='rpl_welcome'
    ['002']='rpl_yourhost'
    ['003']='rpl_created'
    ['004']='rpl_myinfo'
    ['005']='rpl_isupport'
    ['008']='rpl_snomask'
    ['009']='rpl_statmemtot'
    ['010']='rpl_statmem'
    ['020']='rpl_connecting'
    ['014']='rpl_yourcookie'
    ['042']='rpl_yourid'
    ['043']='rpl_savenick'
    ['050']='rpl_attemptingjunc'
    ['051']='rpl_attemptingreroute'
    ['200']='rpl_tracelink'
    ['201']='rpl_traceconnecting'
    ['202']='rpl_tracehandshake'
    ['203']='rpl_traceunknown'
    ['204']='rpl_traceoperator'
    ['205']='rpl_traceuser'
    ['206']='rpl_traceserver'
    ['207']='rpl_traceservice'
    ['208']='rpl_tracenewtype'
    ['209']='rpl_traceclass'
    ['210']='rpl_stats'
    ['211']='rpl_statslinkinfo'
    ['212']='rpl_statscommands'
    ['213']='rpl_statscline'
    ['214']='rpl_statsnline'
    ['215']='rpl_statsiline'
    ['216']='rpl_statskline'
    ['217']='rpl_statsqline'
    ['218']='rpl_statsyline'
    ['219']='rpl_endofstats'
    ['221']='rpl_umodeis'
    ['231']='rpl_serviceinfo'
    ['233']='rpl_service'
    ['234']='rpl_servlist'
    ['235']='rpl_servlistend'
    ['239']='rpl_statsiauth'
    ['241']='rpl_statslline'
    ['242']='rpl_statsuptime'
    ['243']='rpl_statsoline'
    ['244']='rpl_statshline'
    ['245']='rpl_statssline'
    ['250']='rpl_statsconn'
    ['251']='rpl_luserclient'
    ['252']='rpl_luserop'
    ['253']='rpl_luserunknown'
    ['254']='rpl_luserchannels'
    ['255']='rpl_luserme'
    ['256']='rpl_adminme'
    ['257']='rpl_adminloc1'
    ['258']='rpl_adminloc2'
    ['259']='rpl_adminemail'
    ['261']='rpl_tracelog'
    ['262']='rpl_traceend'
    ['263']='rpl_tryagain'
    ['265']='rpl_localusers'
    ['266']='rpl_globalusers'
    ['267']='rpl_start_netstat'
    ['268']='rpl_netstat'
    ['269']='rpl_end_netstat'
    ['270']='rpl_privs'
    ['271']='rpl_silelist'
    ['272']='rpl_endofsilelist'
    ['300']='rpl_none'
    ['301']='rpl_away'
    ['302']='rpl_userhost'
    ['303']='rpl_ison'
    ['305']='rpl_unaway'
    ['306']='rpl_nowaway'
    ['307']='rpl_whoisregnick'
    ['310']='rpl_whoismodes'
    ['311']='rpl_whoisuser'
    ['312']='rpl_whoisserver'
    ['313']='rpl_whoisoperator'
    ['314']='rpl_whowasuser'
    ['315']='rpl_endofwho'
    ['317']='rpl_whoisidle'
    ['318']='rpl_endofwhois'
    ['319']='rpl_whoischannels'
    ['321']='rpl_liststart'
    ['322']='rpl_list'
    ['323']='rpl_listend'
    ['324']='rpl_channelmodeis'
    ['325']='rpl_uniqopis'
    ['328']='rpl_channel_url'
    ['329']='rpl_creationtime'
    ['330']='rpl_whoisaccount'
    ['331']='rpl_notopic'
    ['332']='rpl_topic'
    ['333']='rpl_topicwhotime'
    ['338']='rpl_whoisactually'
    ['340']='rpl_userip'
    ['341']='rpl_inviting'
    ['342']='rpl_summoning'
    ['345']='rpl_invited'
    ['346']='rpl_invitelist'
    ['347']='rpl_endofinvitelist'
    ['348']='rpl_exceptlist'
    ['349']='rpl_endofexceptlist'
    ['351']='rpl_version'
    ['352']='rpl_whoreply'
    ['353']='rpl_namreply'
    ['354']='rpl_whospcrpl'
    ['355']='rpl_namreply_'
    ['361']='rpl_killdone'
    ['362']='rpl_closing'
    ['363']='rpl_closeend'
    ['364']='rpl_links'
    ['365']='rpl_endoflinks'
    ['366']='rpl_endofnames'
    ['367']='rpl_banlist'
    ['368']='rpl_endofbanlist'
    ['369']='rpl_endofwhowas'
    ['371']='rpl_info'
    ['372']='rpl_motd'
    ['373']='rpl_infostart'
    ['374']='rpl_endofinfo'
    ['375']='rpl_motdstart'
    ['376']='rpl_endofmotd'
    ['381']='rpl_youreoper'
    ['382']='rpl_rehashing'
    ['383']='rpl_youreservice'
    ['384']='rpl_myportis'
    ['385']='rpl_notoperanymore'
    ['391']='rpl_time'
    ['392']='rpl_usersstart'
    ['393']='rpl_users'
    ['394']='rpl_endofusers'
    ['395']='rpl_nousers'
    ['396']='rpl_hosthidden'
    ['401']='err_nosuchnick'
    ['402']='err_nosuchserver'
    ['403']='err_nosuchchannel'
    ['404']='err_cannotsendtochan'
    ['405']='err_toomanychannels'
    ['406']='err_wasnosuchnick'
    ['407']='err_toomanytargets'
    ['408']='err_nosuchservice'
    ['409']='err_noorigin'
    ['411']='err_norecipient'
    ['412']='err_notexttosend'
    ['413']='err_notoplevel'
    ['414']='err_wildtoplevel'
    ['415']='err_badmask'
    ['421']='err_unknowncommand'
    ['422']='err_nomotd'
    ['423']='err_noadmininfo'
    ['424']='err_fileerror'
    ['425']='err_noopermotd'
    ['429']='err_toomanyaway'
    ['430']='err_eventnickchange'
    ['431']='err_nonicknamegiven'
    ['432']='err_erroneusnickname'
    ['433']='err_nicknameinuse'
    ['436']='err_nickcollision'
    ['439']='err_targettoofast'
    ['440']='err_sercvicesdown'
    ['441']='err_usernotinchannel'
    ['442']='err_notonchannel'
    ['443']='err_useronchannel'
    ['444']='err_nologin'
    ['445']='err_summondisabled'
    ['446']='err_usersdisabled'
    ['447']='err_nonickchange'
    ['449']='err_notimplemented'
    ['451']='err_notregistered'
    ['455']='err_hostilename'
    ['459']='err_nohiding'
    ['460']='err_notforhalfops'
    ['461']='err_needmoreparams'
    ['462']='err_alreadyregistred'
    ['463']='err_nopermforhost'
    ['464']='err_passwdmismatch'
    ['465']='err_yourebannedcreep'
    ['466']='err_youwillbebanned'
    ['467']='err_keyset'
    ['469']='err_linkset'
    ['471']='err_channelisfull'
    ['472']='err_unknownmode'
    ['473']='err_inviteonlychan'
    ['474']='err_bannedfromchan'
    ['475']='err_badchannelkey'
    ['476']='err_badchanmask'
    ['477']='err_nochanmodes'
    ['478']='err_banlistfull'
    ['481']='err_noprivileges'
    ['482']='err_chanoprivsneeded'
    ['483']='err_cantkillserver'
    ['484']='err_restricted'
    ['485']='err_uniqopprivsneeded'
    ['488']='err_tslesschan'
    ['491']='err_nooperhost'
    ['492']='err_noservicehost'
    ['493']='err_nofeature'
    ['494']='err_badfeature'
    ['495']='err_badlogtype'
    ['496']='err_badlogsys'
    ['497']='err_badlogvalue'
    ['498']='err_isoperlchan'
    ['501']='err_umodeunknownflag'
    ['502']='err_usersdontmatch'
    ['503']='err_ghostedclient'
)

# Translate numeric replies to their names.
#
# numeric_reply
nrep_name () {
    echo "${numeric[$1]:-$1}"
}

# Connect to an IRC server and punt IRC messages.to a parser loop.
#
# Parameters:
#   host [port [connector]]
connect () {
    while $next_host; do
        exec 9<&-
        exec 9<>"$demonbot_io"
        if [[ -z $host ]]; then
            log -c 'Missing host.'
            return 1
        fi
        port=${port:-6667}
        connector=${connector:-tcp}
        con_bin=${connectors["$connector"]}
        if ! in_list "$(cmd_type "$con_bin")" 'function' 'file'; then
            log -c "$connector '$con_bin' isn't executable."
            return 1
        fi
        log -c "Connecting to ${connector^^} host $host:$port."
        unset logged_in user_disconnect
        coproc connection {
            echo '!connect' >&9
            $con_bin "$host" "$port" >&9 2> >(read_do log -d)
            echo '!disconnect' >&9
        }
        parser_loop
        exec 9<&-
        [[ $user_disconnect || $reconnect_auto < 1 ]] &&
            break
        if [[ $hosts ]]; then
            log -c "Waiting $reconnect_secs seconds to reconnect."
            sleep $reconnect_secs
        fi
    done
}

# Parses lines from IRC server (read: /dev/fd/9) and punts it to a handler.
parser_loop () {
    local handler prefix event args line
    while read -r line; do
        if [[ ${line:0:1} == ':' ]]; then
            read -r prefix event line <<< "${line:1}"
        else
            prefix=$host
            read -r event line <<< "$line"
        fi
        [[ -z $event ]] && continue
        event=${event,,}
        IFS=':' read -r args line <<< "$line"
        if [[ ${handlers["$event"]} ]]; then
            log -d "Handling $event with: ${handlers["$event"]}"
            for handler in ${handlers["$event"]}; do
                $handler "$event" "$prefix" $args "$line"
            done
        elif [[ ${handlers['unknown']} ]]; then
            log -d "Handling $event with: ${handlers['unknown']}"
            ${handlers['unknown']} "$event" "$prefix" $args "$line"
        fi
        [[ ${handlers['all']} ]] &&
            ${handlers['all']} "$event" "$prefix" $args "$line"
        case "$event" in
            '!disconnect')
                unset logged_in
                log -c 'Disconnected from server.'
                break
                ;;
            '!connect')
                login ||
                    log -c 'Could not log into server.'
                ;;
        esac
    done <&9
}

# Send command to IRC server.
#
# Parameters:
#   command data
send () {
    local IFS=' '
    if [[ ${connection[1]} ]]; then
        if [[ ${1:0:1} != ':' ]]; then
            echo "${1^^} ${*:2}" >&${connection[1]}
        else
            echo "$1 ${2^^} ${*:3}" >&${connection[1]}
        fi
    else
        log -c 'Not connected to server.'
        return 1
    fi
}

# Send login information to IRC server.
login () {
    if [[ $pass ]]; then
        send pass "$pass" || return 1
    fi
    send nick "$nick" || return 1
    send user "$user $mode * :$name" || return 1
}

# Send a private message.
#
# Parameters:
#   target message [message ...]
privmsg () {
    if [[ -z $2 ]]; then
        log -c 'No target or message set!'
        return 1
    fi
    local message line target=$1
    shift
    for message in "$@"; do
        log -c "Telling $target: $message"
        while read -r line; do
            send privmsg "$target" ":$line"
        done < <(fold -s -w $((497-${#target})) <<< "$message")
    done
}

# Send a CTCP message.
#
# Parameters:
#   type target message
ctcp () {
    if [[ $1 == '-r' ]]; then
        local reply='notice'
        shift
    fi
    if [[ -z $2 ]]; then
        log -c 'No type or message set!'
        return 1
    fi
    local message line name=${1^^} target=$2
    shift 2
    for message in "$@"; do
        log -c "CTCP ${name^^} ${reply:-query} to $target: $message"
        while read -r line; do
            send ${reply:-privmsg} "$target" $':\x01'"$name $line"$'\x01'
        done < <(fold -s -w $((497-${#target}-${#name})) <<< "$message")
    done
}

# Send an action message.
#
# Parameters:
#   target message
action () {
    ctcp action "$1" "$2"
}


# Loop-rotate to the next host in the hosts list.
#
# Parameters:
#   ['prev']
rotate_host () {
    local IFS=$oifs
    read host port connector trash <<< "$hosts"
    port=${port:-6667}
    connector=${connector:-tcp}
    log -c "Selected ${connector^^} host $host:$port."
    if [[ ${#hosts[@]} -gt 1 ]]; then
        if [[ $1 == 'prev' ]]; then
            hosts=("${hosts[-1]}" "${hosts[@]:0:((${#hosts[@]}-1))}")
        else
            hosts=("${hosts[@]:1}" $hosts)
        fi
    fi
}

# Switch to the next host in the hosts list.
pop_host () {
    if [[ -z $hosts ]]; then
        log -c 'There are no more hosts to switch to.'
        return 1
    fi
    local trash IFS=$oifs
    read host port connector trash <<< "$hosts"
    port=${port:-6667}
    connector=${connector:-tcp}
    log -c "Selected ${connector^^} host $host:$port."
    hosts=("${hosts[@]:1}")
}

# Loop-rotate to the next nick in the nicks list.
#
# Parameters:
#   ['prev']
rotate_nick () {
    nick=$nicks
    log -c "Trying nick: $nick"
    if [[ ${#nicks[@]} -gt 1 ]]; then
        if [[ $1 == 'prev' ]]; then
            nicks=("${nicks[-1]}" "${nicks[@]:0:((${#nicks[@]}-1))}")
        else
            nicks=("${nicks[@]:1}" $nicks)
        fi
    fi
}

# Switch to the next nick in the nicks list.
pop_nick () {
    if [[ -z $nicks ]]; then
        log -c 'There are no more nicks to switch to.'
        return 1
    fi
    nick=$nicks
    log -c "Trying nick: $nick"
    nicks=("${nicks[@]:1}")
}

# Join channels specified in join list.
join_auto () {
    event -c join "${join[@]}"
}

# Set sender as origin so that messages will be send back to the sender.
#
# Modifies Globals:
#   $origin     Set to sender.
whisper () {
    origin=(${sender[@]})
}


##################
### Connectors ###
##################
socat_tcp () {
    socat STDIO TCP:"$1":"$2",crlf
}
add_connector -p tcp socat_tcp

socat_ssl () {
    socat STDIO OPENSSL:"$1":"$2",verify=0,crlf
}
add_connector -p ssl socat_ssl

socat_socks () {
    socks_host=${socks_host:-localhost}
    socks_port=${socks_port:-9999}
    socat STDIO \
        SOCKS4A:"$socks_host":"$1":"$2",socksport="$socks_port",crlf
}
add_connector -p socks socat_socks


################
### Handlers ###
################
h_privmsg () {
    local is_command text=${4##$'\x03'*([[:digit:],])}
    local sender=($(split_hostmask "$2")) origin=($(split_hostmask "$3"))
    local sender_mask=${2#*'!'}
    if [[ ${text:0:1} == $cmd_char ]]; then
        is_command=1 text=${text:1}
    elif [[ ${text:0:${#nick}} == $nick ]]; then
        is_command=1 text=${text#*[ :,]}
    fi
    [[ $origin == $nick ]] &&
        is_command=1 origin=(${sender[@]})
    log -c "<$sender $origin> $text"
    if [[ $is_command ]]; then
        local IFS=$'\n\r'
        event -cp $(split_strings "$text")
    fi
}
add_handler -p privmsg h_privmsg

h_ping () {
    send pong $host $2
}
add_handler ping h_ping

h_nick () {
    log -c "$nick nick was changed to $2."
    nick=$2
}
add_handler 'nick' h_nick

h_err_nicknameinuse () {
    [[ $logged_in ]] &&
        return
    if $next_nick; then
        event -c nick
    else
        event -c quit
    fi
}
add_handler '433' h_err_nicknameinuse

h_rpl_myinfo () {
    host=$2
    host_name=$4
    host_ircd=$5
    modes_user=$5
    modes_chan=$6
    logged_in=1
    ircd_features=()
    join_auto
}
add_handler '004' h_rpl_myinfo

h_rpl_isupport () {
    local IFS='=' feature params index p
    shift 3
    for feature in "$@"; do
        [[ $feature =~ 'supported' ]] &&
            break
        IFS='='
        feature=($feature)
        feature[0]=${feature,,}
        case "$feature" in
            prefix)
                IFS=')'
                params=(${feature[1]/'('/})
                ircd_features["$feature.0"]=$params
                ircd_features["$feature.1"]=${params[1]}
                ;;
            *)
                if [[ ${feature[1]} ]]; then
                    index=0
                    IFS=','
                    params=(${feature[1]})
                    IFS=':'
                    for p in "${params[@]}"; do
                        if [[ $p =~ ':' ]]; then
                            p=($p)
                            ircd_features["$feature.${p[0]}"]=${p[1]}
                        elif (( ${#params[@]} > 1 )); then
                            ircd_features["$feature.$index"]=$p
                        else
                            ircd_features["$feature"]=$p
                        fi
                        (( index++ ))
                    done
                else
                    ircd_features["$feature"]=1
                fi
                ;;
        esac
    done
}
add_handler '005' h_rpl_isupport



################
### Commands ###
################
default_groups='admin'

c_privmsg () {
    local IFS=' ' target=$1
    shift
    privmsg "$target" "$*"
}
add_command -p privmsg c_privmsg

c_action () {
    local IFS=' ' target=$1
    shift
    action "$target" "$*"
}
add_command -p action c_action

c_whisper () {
    local IFS=$'\n' target=${1:-$sender}
    action "$origin" "whispers something to $target."
    origin=(${sender[@]})
    shift
    local IFS=$oifs
    event -c cmd "$@"
}
add_command -p whisper c_whisper

c_quit () {
    local IFS=' '
    send quit ":$*"
    user_disconnect=1
}
add_command quit c_quit

c_nick () {
    if [[ $1 ]]; then
        send nick "$1"
    else
        send nick "$nick"
    fi
}
add_command nick c_nick

c_join () {
    local IFS=','
    send join "$*"
}
add_command join c_join

c_mode () {
    send mode "$@"
}
add_command mode c_mode

c_part () {
    send part ":$1"
}
add_command part c_part

c_op () {
    local u f l c=0
    if [[ $1 == '-c' ]]; then
        origin=$2
        shift 2
    elif [[ ! ${ircd_features['chantypes']:-'#'} =~ "${origin[0]:0:1}" ]]
    then
        log "In what channel (-c)?"
        return 1
    fi
    for u in "$@"; do
        f+='o'
        l+=" $u"
        if ((++c == ${ircd_features['modes']:-4})); then
            send mode "$origin" "$f$l"
            f= l= c=0
        fi
    done
    [[ $f ]] &&
        send mode "$origin" "$f$l"
}
add_command op c_op

